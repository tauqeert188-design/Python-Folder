import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

plt.rcParams["font.family"] = "Times New Roman"

fermi_energy = 13.555

# =======================
# Element-resolved contributions
# =======================
elements = {
    "Mn": (
        [
            "Zr6MnTe2.pdos.pdos_atm#7(Mn)_wfc#1(s)",
            "Zr6MnTe2.pdos.pdos_atm#7(Mn)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#7(Mn)_wfc#3(p)",
            "Zr6MnTe2.pdos.pdos_atm#7(Mn)_wfc#4(d)",
        ],
        "red"
    ),
    "Zr": (
        [
            "Zr6MnTe2.pdos.pdos_atm#1(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#1(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#1(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#1(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#1(Zr)_wfc#5(d)",
            "Zr6MnTe2.pdos.pdos_atm#2(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#2(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#2(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#2(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#2(Zr)_wfc#5(d)",
            "Zr6MnTe2.pdos.pdos_atm#3(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#3(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#3(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#3(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#3(Zr)_wfc#5(d)",
            "Zr6MnTe2.pdos.pdos_atm#4(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#4(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#4(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#4(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#4(Zr)_wfc#5(d)",
            "Zr6MnTe2.pdos.pdos_atm#5(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#5(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#5(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#5(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#5(Zr)_wfc#5(d)",
            "Zr6MnTe2.pdos.pdos_atm#6(Zr)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#6(Zr)_wfc#2(s)",
            "Zr6MnTe2.pdos.pdos_atm#6(Zr)_wfc#3(p)", "Zr6MnTe2.pdos.pdos_atm#6(Zr)_wfc#4(p)", "Zr6MnTe2.pdos.pdos_atm#6(Zr)_wfc#5(d)",
        ],
        "limegreen"
    ),
    "Te": (
        [
            "Zr6MnTe2.pdos.pdos_atm#8(Te)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#8(Te)_wfc#2(p)",
            "Zr6MnTe2.pdos.pdos_atm#9(Te)_wfc#1(s)", "Zr6MnTe2.pdos.pdos_atm#9(Te)_wfc#2(p)",
        ],
        "magenta"
    ),
}

# =======================
# Build summed element DOS
# =======================
E = None
curves = {}

for label, (files, color) in elements.items():
    up_sum = None
    dn_sum = None
    for fname in files:
        d = np.loadtxt(fname, comments="#")
        e = d[:,0] - fermi_energy
        up = d[:,1]
        dn = d[:,2] if d.shape[1] >= 3 else None

        if up_sum is None:
            up_sum = np.zeros_like(up)
            dn_sum = np.zeros_like(up)
            if E is None:
                E = e

        up_sum += up
        if dn is not None:
            dn_sum += dn

    curves[label] = (E, up_sum, dn_sum, color)

# =======================
# Plot
# =======================
plt.figure(figsize=(6,6))

for label, (e, up, dn, color) in curves.items():
    plt.fill_between(e, up, 0, color=color, alpha=0.3)
    plt.fill_between(e, -dn, 0, color=color, alpha=0.3)
    plt.plot(e, up, color=color, lw=1.5, label=label)
    plt.plot(e, -dn, color=color, lw=1.5)

# Reference lines
plt.axhline(0, color="black", lw=0.8)
plt.axvline(0, color="blue", linestyle="--", lw=1.5)

# Labels & ticks
plt.title("(a) Zr$_6$MnTe$_2$", fontsize=32, pad=12)
plt.xlabel("Energy (eV)", fontsize=32, labelpad=12)
plt.ylabel("DOS (states/eV)", fontsize=32, labelpad=12)
plt.xticks(np.arange(-8, 5, 2), fontsize=20)
plt.yticks(np.arange(-6, 7, 2), fontsize=20)
plt.tick_params(axis='both', which='major', pad=12, labelsize=20)

plt.xlim(-8.2, 4.2)
plt.ylim(-6.5, 6.2)

# Legend
legend_lines = [
    Line2D([0], [0], color="red", lw=2, label="Mn"),
    Line2D([0], [0], color="magenta", lw=2, label="Zr"),
    Line2D([0], [0], color="green", lw=2, label="Te"),
]
plt.legend(handles=legend_lines, fontsize=16, frameon=False, loc="upper left")

plt.tight_layout()
plt.savefig("Zr6MnTe2_Element_DOS.png", dpi=300)
plt.show()
